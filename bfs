from collections import deque

def bfs(graph, start, goal):
    queue = deque([[start]])
    while queue:
        path = queue.popleft()
        current_node = path[-1]

        if current_node == goal:
            return path

        for neighbor in graph[current_node]:
            if neighbor not in path:
                new_path = list(path)
                new_path.append(neighbor)
                queue.append(new_path)

# Define the graph as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

# Define the start and goal nodes
start_node = 'A'
goal_node = 'F'

# Call the bfs function and print the result
result_path = bfs(graph, start_node, goal_node)
print(result_path)
